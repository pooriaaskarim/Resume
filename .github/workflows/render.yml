name: Render LaTeX Resume

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

permissions:
  contents: write  # Allow actions to push commits and create tags

jobs:
  build:
    runs-on: ubuntu-latest  # Use the default Ubuntu environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Cache LaTeX packages (TeX Live)
      - name: Cache LaTeX packages
        uses: actions/cache@v2
        with:
          path: /usr/local/texlive  # Path where TeX Live packages are installed
          key: ${{ runner.os }}-texlive-${{ hashFiles('resume.tex') }}  # Cache based on OS and LaTeX file hash
          restore-keys: |
            ${{ runner.os }}-texlive-

      # Cache LaTeX build artifacts (auxiliary and output files)
      - name: Cache LaTeX build artifacts
        uses: actions/cache@v2
        with:
          path: .  # Current directory (will cache all LaTeX output files)
          key: ${{ runner.os }}-latex-build-${{ hashFiles('resume.tex') }}  # Cache key based on OS and file hash
          restore-keys: |
            ${{ runner.os }}-latex-build-

      # Set up LaTeX environment and compile
      - name: Set up LaTeX environment
        uses: dante-ev/latex-action@latest  # Use the latest LaTeX action
        with:
          root_file: 'resume.tex'  # Specify your main LaTeX file

      # Rename the generated resume.pdf to PooriaAskariMoqaddam.resume.pdf
      - name: Rename PDF
        run: mv resume.pdf PooriaAskariMoqaddam.resume.pdf

      # Get the latest tag and increment the version number in v<version_number>.<YYMONTHDD> format
      - name: Get latest tag and increment version
        id: versioning
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag, if available
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "none")

          if [ "$LATEST_TAG" = "none" ]; then
            # If no tags exist, start from version 1
            VERSION=1
          else
            # Extract the version number from the latest tag (assuming format v<version_number>.<YYMONTHDD>)
            VERSION=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\..*/\1/')
            VERSION=$((VERSION + 1))  # Increment the version
          fi
          
          # Generate the new tag in v<version_number>.<YYMONTHDD> format
          NEW_TAG="v$VERSION.$(date +'%y')$(date +'%b' | tr '[:lower:]' '[:upper:]')$(date +'%d')"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # Create a new tag for the release
      - name: Create Git tag
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      # Upload renamed resume to GitHub release
      - name: Upload renamed resume to GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the generated tag stored in the environment variable
          files: PooriaAskariMoqaddam.resume.pdf  # Upload the renamed PDF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
