name: Render LaTeX Resume

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Allow actions to push commits and create tags

jobs:
  build:
    runs-on: ubuntu-latest  # Use the default Ubuntu environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2  # Use the latest version of checkout
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Ensure the checkout uses the GITHUB_TOKEN for authentication

      # Cache TeX Live environment (Downloaded files for LaTeX packages)
      - name: Cache TeX Live
        uses: actions/cache@v4.1.2  # Use latest version of cache
        with:
          path: /usr/local/texlive
          key: ${{ runner.os }}-texlive-cache-${{ hashFiles('resume.tex') }}  # Cache key based on the OS and the LaTeX file
          restore-keys: |
            ${{ runner.os }}-texlive-cache-

      # Cache LaTeX build artifacts (auxiliary and output files)
      - name: Cache LaTeX build artifacts
        uses: actions/cache@v4.1.2
        with:
          path: ./  # Cache LaTeX intermediate files (current directory)
          key: ${{ runner.os }}-latex-build-${{ hashFiles('resume.tex') }}  # Cache key based on the OS and LaTeX file
          restore-keys: |
            ${{ runner.os }}-latex-build-

      # Set up LaTeX environment and compile the PDF
      - name: Set up LaTeX environment
        uses: dante-ev/latex-action@latest  # Use the latest LaTeX action
        with:
          root_file: 'resume.tex'  # Specify your main LaTeX file

      # Get latest version, check commit messages, and increment version accordingly
      - name: Get latest version and increment
        id: versioning
        run: |
          # Set up the GitHub authentication token for fetching tags
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

          # Fetch all tags
          git fetch --tags

          # Get latest tag if available
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")

          # Extract the current major, minor, patch versions
          VERSION_REGEX="^v([0-9]+)\.([0-9]+)\.([0-9]+)"
          if [[ $LATEST_TAG =~ $VERSION_REGEX ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=0
            MINOR=0
            PATCH=0
          fi

          # Get the commit message from the latest commit
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Determine version increment based on the commit message
          if [[ "$COMMIT_MSG" =~ "BREAKING CHANGE" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MSG" =~ "feat" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$COMMIT_MSG" =~ "fix" ]]; then
            PATCH=$((PATCH + 1))
          else
            # Default to patch increment if nothing is detected
            PATCH=$((PATCH + 1))
          fi

          # New version
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # Create a new tag for the release
      - name: Create Git tag
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication

      # Rename the generated resume.pdf and upload to GitHub release
      - name: Prepare resume for upload
        run: |
          mv resume.pdf PooriaAskariMoqaddam.resume.pdf  # Rename the file before upload

      - name: Upload resume to GitHub releases
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the generated tag stored in the environment variable
          files: PooriaAskariMoqaddam.resume.pdf  # Upload the renamed PDF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
